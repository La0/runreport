# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-01-09 13:40
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sport', '0001_initial'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username.', 'invalid')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='birthday')),
                ('vma', models.FloatField(blank=True, help_text='Ex: 12.5 km/h', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='vma')),
                ('frequency', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cardiac frequency')),
                ('frequency_rest', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cardiac frequency at rest')),
                ('height', models.IntegerField(blank=True, help_text='Unit: cm', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='height')),
                ('weight', models.IntegerField(blank=True, help_text='Unit: kg', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='weight')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='comment')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Phone')),
                ('nb_sessions', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='number of sessions per week')),
                ('license', models.CharField(blank=True, max_length=12, null=True, verbose_name='license')),
                ('nationality', django_countries.fields.CountryField(default='FR', max_length=2)),
                ('country', django_countries.fields.CountryField(default='FR', max_length=2)),
                ('auto_send', models.BooleanField(default=False, verbose_name='auto send emails')),
                ('daily_trainer_mail', models.BooleanField(default=True, verbose_name='Daily trainer mail')),
                ('language', models.CharField(choices=[('fr', 'French'), ('en', 'English')], default='fr', max_length=2, verbose_name='language used')),
                ('garmin_login', models.CharField(blank=True, max_length=255, null=True, verbose_name='garmin login')),
                ('garmin_password', models.TextField(blank=True, null=True, verbose_name='garmin password')),
                ('strava_token', models.CharField(blank=True, max_length=255, null=True)),
                ('gcal_token', models.CharField(blank=True, max_length=255, null=True)),
                ('gcal_id', models.CharField(blank=True, max_length=255, null=True)),
                ('demo', models.BooleanField(default=False, verbose_name='demo user')),
                ('avatar', models.ImageField(upload_to=users.models.build_avatar_path, verbose_name='profile picture')),
                ('privacy_avatar', models.CharField(choices=[('public', 'Public'), ('club', 'Club'), ('private', 'Private')], default='public', max_length=50, verbose_name='avatar visibility')),
                ('privacy_races', models.CharField(choices=[('public', 'Public'), ('club', 'Club'), ('private', 'Private')], default='public', max_length=50, verbose_name='races visibility')),
                ('privacy_records', models.CharField(choices=[('public', 'Public'), ('club', 'Club'), ('private', 'Private')], default='public', max_length=50, verbose_name='records visibility')),
                ('privacy_stats', models.CharField(choices=[('public', 'Public'), ('club', 'Club'), ('private', 'Private')], default='public', max_length=50, verbose_name='stats visibility')),
                ('privacy_calendar', models.CharField(choices=[('public', 'Public'), ('club', 'Club'), ('private', 'Private')], default='private', max_length=50, verbose_name='calendar visibility')),
                ('privacy_comments', models.CharField(choices=[('public', 'Public'), ('club', 'Club'), ('private', 'Private')], default='public', max_length=50, verbose_name='comments visibility')),
                ('privacy_tracks', models.CharField(choices=[('public', 'Public'), ('club', 'Club'), ('private', 'Private')], default='club', max_length=50, verbose_name='tracks visibility')),
                ('display_help', models.BooleanField(default=True, verbose_name='Display contextual help')),
                ('demo_trainer_active', models.BooleanField(default=True)),
                ('demo_athlete_active', models.BooleanField(default=True)),
                ('demo_steps', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=120)),
                ('min_year', models.IntegerField()),
                ('max_year', models.IntegerField()),
            ],
        ),
        migrations.AddField(
            model_name='athlete',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.UserCategory', verbose_name='category'),
        ),
        migrations.AddField(
            model_name='athlete',
            name='default_sport',
            field=models.ForeignKey(default=3, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sport.Sport', verbose_name='default sport'),
        ),
        migrations.AddField(
            model_name='athlete',
            name='friends',
            field=models.ManyToManyField(related_name='_athlete_friends_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='athlete',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='athlete',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
